var app=app || {};app.GanttView=Backbone.View.extend({	el: '.Gantt',	initialize: function(){		this.collection=app.THCollection;		this.$container=this.$el.find('.task-container');		this.$control=this.$el.find('.head-bar');		this.$menuContainer=this.$el.find('.menu-container');		this.makeSortable();					},	makeSortable:function(){		var that=this;		this.$container.sortable({ axis: "y",helper:function(evt,elem){			var title=elem.find('.task .col-name').text();			return $('<div style="font-weight:bold">-'+title+'</div>');		},		change:function(evt,ui){			var item=ui.item,changedItem;			var id1,id2,model1,model2,temp;			id1=item.find('ul.task').attr('id');			console.log(ui.helper);			if(ui.originalPosition.top<ui.position.top){				//dom position is updated after this function is called				changedItem=ui.placeholder.prev(":not(:hidden)");			}			else{				changedItem=ui.placeholder.next(":not(:hidden)");			}			id2=changedItem.find('ul.task').attr('id');			console.log(id2);			model1=app.tasks.get(id1);			model2=app.tasks.get(id2);						temp=model1.get('sortindex');			model1.set('sortindex',model2.get('sortindex'),{silent:true});			model2.set('sortindex',temp,{silent:true});					model1=null,model2=null,changedItem=null,item=null;					},		stop:function(){			that.canvasView.rendergroups();		}				});	},	events:{		'click #tHandle':'expand',		'dblclick .sub-task':'handlerowclick',		'click .head-bar button':'handbuttonclick'	},	render:function(){		//this.renderButtons();				this.collection.each(function(task){			this.addTask(task);		},this);				stagebv=this.canvasView=new app.KCanvasView().render();	},	handlerowclick:function(evt){		var id=evt.currentTarget.id;		app.tasks.get(id).trigger('editrow',evt);	},	handbuttonclick:function(evt){		var button=$(evt.currentTarget);		var action=button.data('action');		var interval=action.split('-')[1];		app.setting.set('interval',interval);	},	expand:function(evt){		var target=$(evt.target);		var width=0;		var setting=app.setting.getSetting('display');		if(target.hasClass('contract')){			width=setting.tHiddenWidth;		}		else{			width=setting.tableWidth;		}		//console.log('Hello');		this.$menuContainer.css('width',width);		//console.log(this.canvasView);		this.canvasView.setWidth(setting.screenWidth-width-20);		target.toggleClass('contract');	},	addTask: function(task){		var taski=new app.TaskView({model:task});		this.$container.append(taski.render().el);	},	renderButtons:function(){		var buttons=['display-Expand','view-Daily','view-Weekly','view-Monthly','view-Quarterly'];		for(var i=0;i<buttons.length;i++){					}	}})